user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log notice;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    # 日志格式 - 添加缓存状态监控
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'cache:"$sent_http_cache_control" rt:$request_time';

    access_log /var/log/nginx/access.log main;

    # 基础性能优化
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    keepalive_requests 100;
    types_hash_max_size 4096;
    server_tokens off;

    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Gzip 压缩配置
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml
        font/woff
        font/woff2;

    # 缓存文件描述符
    open_file_cache max=1000 inactive=20s;
    open_file_cache_valid 30s;
    open_file_cache_min_uses 2;
    open_file_cache_errors on;

    # Load modular configuration files from the /etc/nginx/conf.d directory.
    include /etc/nginx/conf.d/*.conf;

    # HTTP 重定向到 HTTPS
    server {
        listen 80;
        listen [::]:80;
        server_name xinliuyuansu.com www.xinliuyuansu.com;

        # 重定向所有 HTTP 请求到 HTTPS
        return 301 https://$server_name$request_uri;
    }

    # HTTPS 主站配置
    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name xinliuyuansu.com www.xinliuyuansu.com;
        root /var/www/html;
        index index.html index.htm;

        # SSL 证书配置
        ssl_certificate /etc/letsencrypt/live/xinliuyuansu.com/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/xinliuyuansu.com/privkey.pem;

        # SSL 安全配置
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;

        # HSTS (HTTP Strict Transport Security)
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        # 其他安全头
        add_header X-Frame-Options DENY always;
        add_header X-Content-Type-Options nosniff always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;

        # Load configuration files for the default server block.
        include /etc/nginx/default.d/*.conf;

        # 1. Next.js 静态资源 - 最高优先级长期缓存（包含内容哈希）
        location /_next/static/ {
            expires 1y;
            add_header Cache-Control "public, max-age=31536000, immutable" always;
            add_header Vary "Accept-Encoding" always;

            # 支持预压缩文件
            location ~* \.(js|css)$ {
                gzip_static on;
            }
        }

        # 2. 字体文件 - 长期缓存 + CORS
        location ~* \.(woff|woff2|ttf|eot|otf)$ {
            expires 1y;
            add_header Cache-Control "public, max-age=31536000, immutable" always;
            add_header Access-Control-Allow-Origin "*" always;
            add_header Cross-Origin-Resource-Policy "cross-origin" always;
            try_files $uri =404;
        }

        # 3. 图片文件 - 长期缓存
        location ~* \.(png|jpg|jpeg|gif|ico|webp|avif|svg)$ {
            expires 1y;
            add_header Cache-Control "public, max-age=31536000, immutable" always;
            add_header Vary "Accept" always;
            try_files $uri =404;
        }

        # 4. 音视频文件 - 长期缓存 + 范围请求支持
        location ~* \.(mp3|mp4|avi|mov|wmv|flv|webm|ogg|wav)$ {
            expires 1y;
            add_header Cache-Control "public, max-age=31536000, immutable" always;
            add_header Accept-Ranges "bytes" always;
            try_files $uri =404;
        }

        # 5. CSS/JS 文件（非 _next 目录）- 中期缓存
        location ~* \.(css|js)$ {
            expires 1d;
            add_header Cache-Control "public, max-age=86400, stale-while-revalidate=31536000" always;
            add_header Vary "Accept-Encoding" always;
            try_files $uri =404;
        }

        # 6. HTML 文件 - 禁用缓存
        location ~* \.html$ {
            expires epoch;
            add_header Cache-Control "no-cache, no-store, must-revalidate" always;
            add_header Pragma "no-cache" always;
            add_header Expires "0" always;
            try_files $uri $uri/ /index.html;
        }

        # 7. 根路径和其他路径 - 禁用缓存（主要是 HTML）
        location / {
            expires epoch;
            add_header Cache-Control "no-cache, no-store, must-revalidate" always;
            add_header Pragma "no-cache" always;
            add_header Expires "0" always;
            try_files $uri $uri/ /index.html;
        }

        # 8. API 路径（如果有）- 禁用缓存
        location /api/ {
            expires epoch;
            add_header Cache-Control "no-cache, no-store, must-revalidate" always;
        }

        # 9. 健康检查端点
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # 错误页面
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }

    # IP 直接访问的 HTTP 配置（保留用于健康检查）
    server {
        listen 80;
        listen [::]:80;
        server_name 60.205.169.140;
        root /var/www/html;
        index index.html index.htm;

        # Next.js 静态资源 - 长期缓存
        location /_next/static/ {
            expires 1y;
            add_header Cache-Control "public, max-age=31536000, immutable" always;
            add_header Vary "Accept-Encoding" always;
        }

        # 字体文件 - 长期缓存
        location ~* \.(woff|woff2|ttf|eot|otf)$ {
            expires 1y;
            add_header Cache-Control "public, max-age=31536000, immutable" always;
            add_header Access-Control-Allow-Origin "*" always;
            try_files $uri =404;
        }

        # 图片文件 - 长期缓存
        location ~* \.(png|jpg|jpeg|gif|ico|webp|avif|svg)$ {
            expires 1y;
            add_header Cache-Control "public, max-age=31536000, immutable" always;
            try_files $uri =404;
        }

        # 音视频文件 - 长期缓存
        location ~* \.(mp3|mp4|avi|mov|wmv|flv|webm|ogg|wav)$ {
            expires 1y;
            add_header Cache-Control "public, max-age=31536000, immutable" always;
            add_header Accept-Ranges "bytes" always;
            try_files $uri =404;
        }

        # CSS/JS 文件 - 中期缓存
        location ~* \.(css|js)$ {
            expires 1d;
            add_header Cache-Control "public, max-age=86400, stale-while-revalidate=31536000" always;
            try_files $uri =404;
        }

        # HTML 文件 - 禁用缓存
        location ~* \.html$ {
            expires epoch;
            add_header Cache-Control "no-cache, no-store, must-revalidate" always;
            add_header Pragma "no-cache" always;
            add_header Expires "0" always;
            try_files $uri $uri/ /index.html;
        }

        # 根路径 - 禁用缓存
        location / {
            expires epoch;
            add_header Cache-Control "no-cache, no-store, must-revalidate" always;
            add_header Pragma "no-cache" always;
            add_header Expires "0" always;
            try_files $uri $uri/ /index.html;
        }

        # 错误页面
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }

    # Live2D模型服务器的 HTTP 重定向
    server {
        listen 80;
        listen [::]:80;
        server_name model.ti-ai-calculator.com;

        # 重定向到 HTTPS
        return 301 https://$server_name$request_uri;
    }

    # Live2D模型服务器的 HTTPS 配置
    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name model.ti-ai-calculator.com;
        root /var/www/model_html;
        index index.html index.htm;

        # SSL 证书配置
        ssl_certificate /etc/letsencrypt/live/model.ti-ai-calculator.com/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/model.ti-ai-calculator.com/privkey.pem;

        # SSL 安全配置
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;

        # HSTS
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        # 静态资源缓存优化
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot|wav|mp3|ogg)$ {
            expires 1y;
            add_header Cache-Control "public, max-age=31536000, immutable" always;
            add_header Vary "Accept-Encoding" always;
        }

        # Live2D模型文件 - 长期缓存 + CORS
        location ~* \.(json|moc3|physics3\.json|cdi3\.json|exp3\.json|motion3\.json)$ {
            expires 1y;
            add_header Cache-Control "public, max-age=31536000, immutable" always;
            add_header Access-Control-Allow-Origin "*" always;
            add_header Access-Control-Allow-Methods "GET, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept" always;
        }

        # 基本的静态文件处理
        location / {
            try_files $uri $uri/ /index.html;
        }

        # 错误页面
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }

}
